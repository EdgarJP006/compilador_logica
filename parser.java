
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jul 11 16:32:28 EST 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Jul 11 16:32:28 EST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\003\003\000\002\002\004\000\002\020" +
    "\004\000\002\020\003\000\002\006\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\007\005\000\002\011\006\000\002" +
    "\012\005\000\002\010\006\000\002\013\006\000\002\014" +
    "\006\000\002\015\006\000\002\016\006\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\021\004\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\016\002\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\026\uffdd\001\002\000\016\002\001\015\011\016\021" +
    "\017\013\020\015\026\017\001\002\000\004\002\007\001" +
    "\002\000\016\002\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\026\ufffe\001\002\000\004\002\000\001\002\000\004\004" +
    "\121\001\002\000\004\005\116\001\002\000\016\002\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\026\uffff\001\002\000" +
    "\004\005\114\001\002\000\004\004\113\001\002\000\004" +
    "\005\110\001\002\000\004\004\107\001\002\000\020\004" +
    "\ufffd\006\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\001\002\000\004\004\106\001\002\000\004\005\103\001" +
    "\002\000\004\004\102\001\002\000\004\012\024\001\002" +
    "\000\020\005\036\007\035\021\027\022\025\023\033\025" +
    "\026\026\017\001\002\000\004\005\077\001\002\000\016" +
    "\004\uffea\006\uffea\010\uffea\011\uffea\013\uffea\014\uffea\001" +
    "\002\000\004\005\074\001\002\000\014\004\ufff7\010\043" +
    "\011\041\013\042\014\045\001\002\000\016\004\uffe6\006" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\001\002\000\016" +
    "\004\uffe5\006\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\001" +
    "\002\000\004\005\053\001\002\000\016\004\uffe7\006\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\001\002\000\020\005" +
    "\036\007\035\021\027\022\025\023\033\025\026\026\017" +
    "\001\002\000\020\005\036\007\035\021\027\022\025\023" +
    "\033\025\026\026\017\001\002\000\016\004\uffe8\006\uffe8" +
    "\010\uffe8\011\uffe8\013\uffe8\014\uffe8\001\002\000\014\006" +
    "\044\010\043\011\041\013\042\014\045\001\002\000\020" +
    "\005\036\007\035\021\027\022\025\023\033\025\026\026" +
    "\017\001\002\000\020\005\036\007\035\021\027\022\025" +
    "\023\033\025\026\026\017\001\002\000\020\005\036\007" +
    "\035\021\027\022\025\023\033\025\026\026\017\001\002" +
    "\000\016\004\uffe9\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\001\002\000\020\005\036\007\035\021\027\022\025" +
    "\023\033\025\026\026\017\001\002\000\016\004\uffeb\006" +
    "\uffeb\010\uffeb\011\uffeb\013\042\014\uffeb\001\002\000\016" +
    "\004\uffed\006\uffed\010\uffed\011\uffed\013\042\014\045\001" +
    "\002\000\016\004\uffec\006\uffec\010\uffec\011\uffec\013\uffec" +
    "\014\uffec\001\002\000\016\004\uffee\006\uffee\010\043\011" +
    "\uffee\013\042\014\045\001\002\000\016\004\uffef\006\uffef" +
    "\010\uffef\011\uffef\013\uffef\014\uffef\001\002\000\010\005" +
    "\057\007\055\026\017\001\002\000\014\006\073\010\063" +
    "\011\061\013\062\014\065\001\002\000\010\005\057\007" +
    "\055\026\017\001\002\000\014\006\uffde\010\uffde\011\uffde" +
    "\013\uffde\014\uffde\001\002\000\010\005\057\007\055\026" +
    "\017\001\002\000\014\006\064\010\063\011\061\013\062" +
    "\014\065\001\002\000\010\005\057\007\055\026\017\001" +
    "\002\000\010\005\057\007\055\026\017\001\002\000\010" +
    "\005\057\007\055\026\017\001\002\000\014\006\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\001\002\000\010\005\057" +
    "\007\055\026\017\001\002\000\014\006\uffe0\010\uffe0\011" +
    "\uffe0\013\062\014\uffe0\001\002\000\014\006\uffe2\010\uffe2" +
    "\011\uffe2\013\062\014\065\001\002\000\014\006\uffe1\010" +
    "\uffe1\011\uffe1\013\uffe1\014\uffe1\001\002\000\014\006\uffe3" +
    "\010\063\011\uffe3\013\062\014\065\001\002\000\014\006" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\001\002\000\016" +
    "\004\ufff0\006\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\001" +
    "\002\000\010\005\057\007\055\026\017\001\002\000\014" +
    "\006\076\010\063\011\061\013\062\014\065\001\002\000" +
    "\016\004\ufff2\006\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2" +
    "\001\002\000\010\005\057\007\055\026\017\001\002\000" +
    "\014\006\101\010\063\011\061\013\062\014\065\001\002" +
    "\000\016\004\ufff1\006\ufff1\010\ufff1\011\ufff1\013\ufff1\014" +
    "\ufff1\001\002\000\016\002\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\026\ufff9\001\002\000\020\005\036\007\035\021" +
    "\027\022\025\023\033\025\026\026\017\001\002\000\014" +
    "\006\105\010\043\011\041\013\042\014\045\001\002\000" +
    "\004\004\ufff6\001\002\000\016\002\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\026\ufffc\001\002\000\016\002\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\026\ufffb\001\002\000\010" +
    "\005\057\007\055\026\017\001\002\000\014\006\112\010" +
    "\063\011\061\013\062\014\065\001\002\000\004\004\ufff3" +
    "\001\002\000\016\002\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\026\ufffa\001\002\000\004\006\115\001\002\000\004" +
    "\004\ufff5\001\002\000\004\024\117\001\002\000\004\006" +
    "\120\001\002\000\004\004\ufff4\001\002\000\016\002\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\026\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\003\004\004\005\020\003\001\001\000" +
    "\020\006\022\007\017\010\015\011\013\012\021\013\007" +
    "\017\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\027\006\036\014\033\015\030\016\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\051\006\036\014" +
    "\033\015\030\016\031\001\001\000\014\005\037\006\036" +
    "\014\033\015\030\016\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\050\006\036\014\033\015\030" +
    "\016\031\001\001\000\014\005\047\006\036\014\033\015" +
    "\030\016\031\001\001\000\014\005\046\006\036\014\033" +
    "\015\030\016\031\001\001\000\002\001\001\000\014\005" +
    "\045\006\036\014\033\015\030\016\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\055\021\053\001\001" +
    "\000\002\001\001\000\006\006\055\021\071\001\001\000" +
    "\002\001\001\000\006\006\055\021\057\001\001\000\002" +
    "\001\001\000\006\006\055\021\070\001\001\000\006\006" +
    "\055\021\067\001\001\000\006\006\055\021\066\001\001" +
    "\000\002\001\001\000\006\006\055\021\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\055\021\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\055\021\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\103\006\036" +
    "\014\033\015\030\016\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\055\021\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	static TablaSimbolos ts;
	static CodigoIntermedio codigoIntermedio;
	static String ficheroCodigoIntermedio=null;
	static String codFuente;

	public void error(String mensaje) {
		System.out.println("ERROR lin:"+InformacionCodigo.linea+" tok:"+InformacionCodigo.token+" => "+mensaje);
	}

	public static void inicializar() throws IOException {
		ts = new TablaSimbolos();
		codigoIntermedio = new CodigoIntermedio(ficheroCodigoIntermedio);
		codigoIntermedio.abrirFicheroEscritura();
	}

	public static void main(String args[]) throws Exception {
		if (args.length != 1)
			System.out.println(Textos.faltaFichero);
		else {
			try {
				Yylex lexico = new Yylex(new FileReader(args[0]));
				String name = (String)args[0];
				codFuente= name.substring(0,name.lastIndexOf("."));
				ficheroCodigoIntermedio = codFuente + ".log";
				inicializar();
				new parser(lexico).parse();
			}
			catch (FileNotFoundException e1) {
				System.out.println(Textos.ficheroNoAbierto);
			}
		}
	}

	// Muestra el texto de un error
	public void report_error(String message, Object info) {
		error(message);
	}

	// Muestra un error de sintaxis
	public void syntax_error(Symbol actual) {
          error("Error SINTACTICO");  
	}

	// Muestra el texto de un error irrecuperable
	public void report_fatal_error(String message, Object info) {
		error(message);
	}

	// Muestra un mensaje cuando no se puede seguir analizando
	public void unrecovered_syntax_error(Symbol actual) {
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	void semPutSimbolo(String identificador,int valor){
		parser.ts.putSimbolo(identificador,valor);
	}

	int semGetValor(String identificador){
		if(parser.ts.existe(identificador))
			return parser.ts.getValor(identificador);
		else return 0;
	}

	Expresion semNuevoNumero(String s) {
		int valor=0;
		valor=Integer.parseInt(s);
		return new Expresion(valor);
	}

	Expresion semNO(Expresion e) {
		int valor=e.getContenido();
		if(valor==0) valor=1; else valor=0;
		return new Expresion(valor);
	}

	Expresion semAND(Expresion e1,Expresion e2) {
		int v1=e1.getContenido();
		int v2=e2.getContenido();
		if(v1*v2==0) v1=0; else v1=1;
		return new Expresion(v1);
	}

	Expresion semOR(Expresion e1,Expresion e2) {
		int v1=e1.getContenido();
		int v2=e2.getContenido();
		if( v1!=0 || v2!=0) v1=1; else v1=0;
		return new Expresion(v1);
	}

	Expresion semENTONCES(Expresion e1,Expresion e2) {
		int v1=e1.getContenido();
		int v2=e2.getContenido();
		return semOR(semNO(e1),e2);
	}

	Expresion semDOBLEENTONCES(Expresion e1,Expresion e2) {
		int v1=e1.getContenido();
		int v2=e2.getContenido();
		if((v1==0 && v2==0) || (v1==1 && v2==1)) v1=1;else v1=0;
		return new Expresion(v1);
	}

	Expresion semValorIdentificador(String i) {
		return new Expresion(semGetValor(i));
	}

	void semAsignar(String i,int v) {
		semPutSimbolo(i,v);
	}	
	
	String[][] semMatrizIdentificador(String id) {
		String[][] s=new String[3][2];
		s[0][0]=id;
		s[1][0]="0";
		s[1][1]="0";
		s[2][0]="1";
		s[2][1]="1";
		return s;
	}

	int elevado(int base,int exponente) {
		if(exponente>0) return base*elevado(base,exponente-1); else return 1;
	}	

	String[][] semMatrizAND(String[][] m1,String[][] m2) {
		Vector v=new Vector();
		for(int columna=0;columna<(m1[0].length)-1;columna++) {
			if(!v.contains(m1[0][columna])) v.addElement(m1[0][columna]);
		}
		for(int columna=0;columna<(m2[0].length)-1;columna++) {
			if(!v.contains(m2[0][columna])) v.addElement(m2[0][columna]);
		}
		int tamano=elevado(2,v.size());
		String binario;
		String[][] r=new String[tamano+1][v.size()+1];
		for(int columna=0;columna<(r[0].length)-1;columna++) r[0][columna]=(String)v.elementAt(columna);
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer longitud=new StringBuffer();
			binario=Integer.toBinaryString(fila-1);
			for(int i=0;i<v.size()-binario.length();i++) longitud.append("0");
			longitud.append(binario);
			for(int columna=0;columna<v.size();columna++) {
				r[fila][columna]=longitud.substring(columna,columna+1);
			}
		}
		for(int fila=1;fila<m1.length;fila++) {
			for(int columna=0;columna<(m1[0].length)-1;columna++) {
				m1[fila][columna]=m1[0][columna]+"="+m1[fila][columna];
			}	
		}
		for(int fila=1;fila<m2.length;fila++) {
			for(int columna=0;columna<(m2[0].length)-1;columna++) {
				m2[fila][columna]=m2[0][columna]+"="+m2[fila][columna];
			}	
		}
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer c=new StringBuffer();
			for(int columna=0;columna<(r[0].length)-1;columna++) {
				c.append(r[0][columna]+"="+r[fila][columna]);
			}
			int r1=0;
			boolean resultado1;
			for(int fila1=1;fila1<m1.length;fila1++) {
				resultado1=true;
				for(int columna=0;columna<(m1[0].length)-1;columna++) {
					if(c.toString().indexOf(m1[fila1][columna])<0) {
						resultado1=false;
						break;
					}
				}
				if(resultado1==true) {
					r1=Integer.parseInt(m1[fila1][(m1[0].length)-1]);
					break;
				}
			}
			int r2=0;
			boolean resultado2;
			for(int fila2=1;fila2<m2.length;fila2++) {
				resultado2=true;
				for(int columna=0;columna<(m2[0].length)-1;columna++) {
					if(c.toString().indexOf(m2[fila2][columna])<0) {
						resultado2=false;
						break;
					}
				}
				if(resultado2==true) {
					r2=Integer.parseInt(m2[fila2][(m2[0].length)-1]);
					break;
				}
			}
			if(r1*r2==0) r[fila][(r[0].length)-1]="0";else r[fila][(r[0].length)-1]="1";
		}		
		return r;
	}
	

	String[][] semMatrizOR(String[][] m1,String[][] m2) {
		Vector v=new Vector();
		for(int columna=0;columna<(m1[0].length)-1;columna++) {
			if(!v.contains(m1[0][columna])) v.addElement(m1[0][columna]);
		}
		for(int columna=0;columna<(m2[0].length)-1;columna++) {
			if(!v.contains(m2[0][columna])) v.addElement(m2[0][columna]);
		}
		int tamano=elevado(2,v.size());
		String binario;
		String[][] r=new String[tamano+1][v.size()+1];
		for(int columna=0;columna<(r[0].length)-1;columna++) r[0][columna]=(String)v.elementAt(columna);
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer longitud=new StringBuffer();
			binario=Integer.toBinaryString(fila-1);
			for(int i=0;i<v.size()-binario.length();i++) longitud.append("0");
			longitud.append(binario);
			for(int columna=0;columna<v.size();columna++) {
				r[fila][columna]=longitud.substring(columna,columna+1);
			}
		}
		for(int fila=1;fila<m1.length;fila++) {
			for(int columna=0;columna<(m1[0].length)-1;columna++) {
				m1[fila][columna]=m1[0][columna]+"="+m1[fila][columna];
			}	
		}
		for(int fila=1;fila<m2.length;fila++) {
			for(int columna=0;columna<(m2[0].length)-1;columna++) {
				m2[fila][columna]=m2[0][columna]+"="+m2[fila][columna];
			}	
		}
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer c=new StringBuffer();
			for(int columna=0;columna<(r[0].length)-1;columna++) {
				c.append(r[0][columna]+"="+r[fila][columna]);
			}
			int r1=0;
			boolean resultado1;
			for(int fila1=1;fila1<m1.length;fila1++) {
				resultado1=true;
				for(int columna=0;columna<(m1[0].length)-1;columna++) {
					if(c.toString().indexOf(m1[fila1][columna])<0) {
						resultado1=false;
						break;
					}
				}
				if(resultado1==true) {
					r1=Integer.parseInt(m1[fila1][(m1[0].length)-1]);
					break;
				}
			}
			int r2=0;
			boolean resultado2;
			for(int fila2=1;fila2<m2.length;fila2++) {
				resultado2=true;
				for(int columna=0;columna<(m2[0].length)-1;columna++) {
					if(c.toString().indexOf(m2[fila2][columna])<0) {
						resultado2=false;
						break;
					}
				}
				if(resultado2==true) {
					r2=Integer.parseInt(m2[fila2][(m2[0].length)-1]);
					break;
				}
			}
			if(r1!=0 || r2!=0) r[fila][(r[0].length)-1]="1";else r[fila][(r[0].length)-1]="0";
		}		
		return r;
	}	

	String[][] semMatrizENTONCES(String[][] m1,String[][] m2) {
		Vector v=new Vector();
		for(int columna=0;columna<(m1[0].length)-1;columna++) {
			if(!v.contains(m1[0][columna])) v.addElement(m1[0][columna]);
		}
		for(int columna=0;columna<(m2[0].length)-1;columna++) {
			if(!v.contains(m2[0][columna])) v.addElement(m2[0][columna]);
		}
		int tamano=elevado(2,v.size());
		String binario;
		String[][] r=new String[tamano+1][v.size()+1];
		for(int columna=0;columna<(r[0].length)-1;columna++) r[0][columna]=(String)v.elementAt(columna);
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer longitud=new StringBuffer();
			binario=Integer.toBinaryString(fila-1);
			for(int i=0;i<v.size()-binario.length();i++) longitud.append("0");
			longitud.append(binario);
			for(int columna=0;columna<v.size();columna++) {
				r[fila][columna]=longitud.substring(columna,columna+1);
			}
		}
		for(int fila=1;fila<m1.length;fila++) {
			for(int columna=0;columna<(m1[0].length)-1;columna++) {
				m1[fila][columna]=m1[0][columna]+"="+m1[fila][columna];
			}	
		}
		for(int fila=1;fila<m2.length;fila++) {
			for(int columna=0;columna<(m2[0].length)-1;columna++) {
				m2[fila][columna]=m2[0][columna]+"="+m2[fila][columna];
			}	
		}
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer c=new StringBuffer();
			for(int columna=0;columna<(r[0].length)-1;columna++) {
				c.append(r[0][columna]+"="+r[fila][columna]);
			}
			int r1=0;
			boolean resultado1;
			for(int fila1=1;fila1<m1.length;fila1++) {
				resultado1=true;
				for(int columna=0;columna<(m1[0].length)-1;columna++) {
					if(c.toString().indexOf(m1[fila1][columna])<0) {
						resultado1=false;
						break;
					}
				}
				if(resultado1==true) {
					r1=Integer.parseInt(m1[fila1][(m1[0].length)-1]);
					break;
				}
			}
			int r2=0;
			boolean resultado2;
			for(int fila2=1;fila2<m2.length;fila2++) {
				resultado2=true;
				for(int columna=0;columna<(m2[0].length)-1;columna++) {
					if(c.toString().indexOf(m2[fila2][columna])<0) {
						resultado2=false;
						break;
					}
				}
				if(resultado2==true) {
					r2=Integer.parseInt(m2[fila2][(m2[0].length)-1]);
					break;
				}
			}
			if(r1==0) r1=1;else r1=0;
			if(r1!=0 || r2!=0) r[fila][(r[0].length)-1]="1";else r[fila][(r[0].length)-1]="0";
		}		
		return r;
	}

	String[][] semMatrizDOBLEENTONCES(String[][] m1,String[][] m2) {
		Vector v=new Vector();
		for(int columna=0;columna<(m1[0].length)-1;columna++) {
			if(!v.contains(m1[0][columna])) v.addElement(m1[0][columna]);
		}
		for(int columna=0;columna<(m2[0].length)-1;columna++) {
			if(!v.contains(m2[0][columna])) v.addElement(m2[0][columna]);
		}
		int tamano=elevado(2,v.size());
		String binario;
		String[][] r=new String[tamano+1][v.size()+1];
		for(int columna=0;columna<(r[0].length)-1;columna++) r[0][columna]=(String)v.elementAt(columna);
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer longitud=new StringBuffer();
			binario=Integer.toBinaryString(fila-1);
			for(int i=0;i<v.size()-binario.length();i++) longitud.append("0");
			longitud.append(binario);
			for(int columna=0;columna<v.size();columna++) {
				r[fila][columna]=longitud.substring(columna,columna+1);
			}
		}
		for(int fila=1;fila<m1.length;fila++) {
			for(int columna=0;columna<(m1[0].length)-1;columna++) {
				m1[fila][columna]=m1[0][columna]+"="+m1[fila][columna];
			}	
		}
		for(int fila=1;fila<m2.length;fila++) {
			for(int columna=0;columna<(m2[0].length)-1;columna++) {
				m2[fila][columna]=m2[0][columna]+"="+m2[fila][columna];
			}	
		}
		for(int fila=1;fila<r.length;fila++) {
			StringBuffer c=new StringBuffer();
			for(int columna=0;columna<(r[0].length)-1;columna++) {
				c.append(r[0][columna]+"="+r[fila][columna]);
			}
			int r1=0;
			boolean resultado1;
			for(int fila1=1;fila1<m1.length;fila1++) {
				resultado1=true;
				for(int columna=0;columna<(m1[0].length)-1;columna++) {
					if(c.toString().indexOf(m1[fila1][columna])<0) {
						resultado1=false;
						break;
					}
				}
				if(resultado1==true) {
					r1=Integer.parseInt(m1[fila1][(m1[0].length)-1]);
					break;
				}
			}
			int r2=0;
			boolean resultado2;
			for(int fila2=1;fila2<m2.length;fila2++) {
				resultado2=true;
				for(int columna=0;columna<(m2[0].length)-1;columna++) {
					if(c.toString().indexOf(m2[fila2][columna])<0) {
						resultado2=false;
						break;
					}
				}
				if(resultado2==true) {
					r2=Integer.parseInt(m2[fila2][(m2[0].length)-1]);
					break;
				}
			}
			if((r1==0 && r2==0)|| (r1==1 && r2==1)) r[fila][(r[0].length)-1]="1";else r[fila][(r[0].length)-1]="0";
		}		
		return r;
	}

	String[][] semMatrizNOT(String[][] m) {
		for(int fila=1;fila<m.length;fila++) {
			if((m[fila][(m[0].length)-1]).equals("0")) m[fila][(m[0].length)-1]="1";else m[fila][(m[0].length)-1]="0";
		}
		return m;
	}	

	Expresion semTautologia(String[][] m) {
		int resultado=1;
		for(int fila=1;fila<m.length;fila++) {
			if((m[fila][(m[0].length)-1]).equals("0")) {
				resultado=0;
				break;
			}
		}
		return new Expresion(resultado);
	}

	Expresion semContradiccion(String[][] m) {
		int resultado=1;
		for(int fila=1;fila<m.length;fila++) {
			if((m[fila][(m[0].length)-1]).equals("1")) {
				resultado=0;
				break;
			}
		}
		return new Expresion(resultado);
	}

	Expresion semDecidible(String[][] m) {
		int resultado=0;
		for(int fila=1;fila<m.length;fila++) {
			if((m[fila][(m[0].length)-1]).equals("1")) {
				resultado=1;
				break;
			}
		}
		return new Expresion(resultado);
	}

	void semEscribeTabla(String[][] m) {
		StringBuffer t=new StringBuffer();
		t.append("< ");
		for(int columna=0;columna<(m[0].length)-1;columna++) {
			t.append(m[0][columna]+",");
		}
		t.append(": ? >");
		parser.codigoIntermedio.escribirLn(t.toString());
		for(int fila=1;fila<m.length;fila++) {
			StringBuffer s=new StringBuffer();
			s.append("< ");
			for(int columna=0;columna<(m[0].length)-1;columna++) {
				s.append(m[fila][columna]+" ");
			}
			s.append(": "+m[fila][m[0].length-1]+" ");
			s.append(">");
			parser.codigoIntermedio.escribirLn(s.toString());
		}
	}

	void semFinPrograma() {
		parser.codigoIntermedio.cerrarFicheroEscritura();
	}

	void semEscribir(String cadena) {
		parser.codigoIntermedio.escribir(cadena);
	}

	void semEscribirLn(String cadena) {
		parser.codigoIntermedio.escribirLn(cadena);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nulo ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*nulo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // matriz ::= identificador 
            {
              String[][] RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semMatrizIdentificador(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // matriz ::= PARENTIZQ matriz PARENTDER 
            {
              String[][] RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[][] m = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=m; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // matriz ::= matriz OR matriz 
            {
              String[][] RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[][] m1 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] m2 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semMatrizOR(m1,m2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // matriz ::= matriz AND matriz 
            {
              String[][] RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[][] m1 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] m2 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semMatrizAND(m1,m2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // matriz ::= matriz ENTONCES matriz 
            {
              String[][] RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[][] m1 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] m2 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semMatrizENTONCES(m1,m2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // matriz ::= matriz DOBLEENTONCES matriz 
            {
              String[][] RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[][] m1 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] m2 = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semMatrizDOBLEENTONCES(m1,m2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // matriz ::= NOT matriz 
            {
              String[][] RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] m = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semMatrizNOT(m); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*matriz*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= sentdeci 
            {
              Expresion RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] s = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semDecidible(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= sentcontra 
            {
              Expresion RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] s = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semContradiccion(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= senttauto 
            {
              Expresion RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[][] s = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semTautologia(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= identificador 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semValorIdentificador(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= PARENTIZQ expresion PARENTDER 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= NUMERO 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semNuevoNumero(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semOR(e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semAND(e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion ENTONCES expresion 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semENTONCES(e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion DOBLEENTONCES expresion 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semDOBLEENTONCES(e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= NOT expresion 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=semNO(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentdeci ::= DECI PARENTIZQ matriz PARENTDER 
            {
              String[][] RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[][] m = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=m; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*sentdeci*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentcontra ::= CONTRA PARENTIZQ matriz PARENTDER 
            {
              String[][] RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[][] m = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=m; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*sentcontra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // senttauto ::= TAUTO PARENTIZQ matriz PARENTDER 
            {
              String[][] RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[][] m = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=m; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*senttauto*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentwritetabla ::= WRITETABLA PARENTIZQ matriz PARENTDER 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[][] m = (String[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semEscribeTabla(m); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*sentwritetabla*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentwritestr ::= WRITESTR PARENTIZQ CADENA PARENTDER 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semEscribir(c.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*sentwritestr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentwriteintro ::= WRITEINTRO PARENTIZQ PARENTDER 
            {
              Object RESULT = null;
		 semEscribirLn(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*sentwriteintro*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentwritelog ::= WRITELOG PARENTIZQ expresion PARENTDER 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semEscribir(String.valueOf(e.getContenido())); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*sentwritelog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asig ::= identificador ASIGNACION expresion 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 semAsignar(i,e.getContenido()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*asig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= sentwritetabla PUNTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= sentwriteintro PUNTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= sentwritelog PUNTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= sentwritestr PUNTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= asig PUNTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identificador ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*identificador*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= nulo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= sentencias sentencia 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= sentencias 
            {
              Object RESULT = null;
		 semFinPrograma(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

